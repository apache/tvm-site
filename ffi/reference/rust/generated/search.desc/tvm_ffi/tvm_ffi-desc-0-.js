searchState.loadedDescShard("tvm_ffi", 0, "DLPack data type struct\nDLPack data type code enum\nTVM FFI Any value - a union type that can hold various …\nThe type of the stream handle.\nThe index type of the FFI objects\nAttach a context to a result if it is error\nCreate a new error with file/line info attached\nCheck if an Any contains a DLDataType\nCheck the return code of the safe call\nCopy a DLDataType from an Any view (after type check)\nCopy a DLDataType to an Any view\ndata union - 8 bytes\nCreate a new error with file/line info attached\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMacro gto get the name of the function\nMacro to implement ArgIntoRef for a list of types\nMacro to implement IntoArgHolder for a list of types\nMacro to implement <code>TryFrom&lt;AnyView&gt;</code> and <code>TryFrom&lt;Any&gt;</code> for a …\nMacro to implement <code>TryFrom&lt;AnyView&gt;</code> and <code>TryFrom&lt;Any&gt;</code> for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ninto_typed_fn\nArray object.\nPOD bool value\nTVMFFIByteArray*\nBytes object, layout = { TVMFFIObject, TVMFFIByteArray, ……\nDLTensor*\nDLDataType\nDLDevice\nError object.\nPOD float value\nFunction object.\nPOD int value\nMap object.\nRuntime dynamic loaded module object.\nNone/nullptr value\nR-value reference to ObjectRef\nOpaque pointer object\nOpaque python object.\nconst char*\nShape object, layout = { TVMFFIObject, { const int64_t*, …\nSmall bytes on stack\nSmall string on stack\nStart of statically defined objects.\nString object, layout = { TVMFFIObject, TVMFFIByteArray, …\nTensor object, layout = { TVMFFIObject, DLTensor, … }\nMove a DLDataType from an Any (after type check)\nMove a DLDataType into an Any\ncreate a new instance of TVMFFIAny that represents None\nsmall string length or zero padding\nTry to cast an Any view to a DLDataType\nMacro to export a typed function as a C symbol that …\nType index of the object. The type index of Object and Any …\nGet the type string identifier for DLDataType\nManaged Any that can hold reference to values\nUnmanaged Any that can hold reference to values\nHolder for Any value\nGet the strong count of the underlying object for …\nGet the strong count of the underlying object for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove the value out of the holder\nCreate a new holder for the value\nTry to query if stored typed in Any exactly matches the …\nMore strict version than try_from/try_into\nCollection types\nABI stable owned Shape for ffi\nGet the shape as a slice\nFill the strides from the shape\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty Shape\nExample CPU NDAllocator This allocator allocates data on …\nDLTensorExt trait This trait provides methods to get the …\nThe minimum alignment of the data allocated by the …\nTrait for n-dimensional array allocators\nABI stable owned Shape for ffi\nAllocate data for the given DLTensor\nGet the data as a mutable slice\nGet the data pointer of the Tensor\nGet the data pointer of the Tensor\nFree data for the given DLTensor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nArguments\nCreate a Tensor from a slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the Tensor is contiguous\nnamespace to re-export derive macros\nnamespace to re-export derive macros\nGet the current stream for a device\ncall f with the stream set to the given stream\nTrait to convert standard data types to DLDataType\nExtra methods for DLDataType\nThe corresponding DLDataType for this type\nConvert the DLDataType to a string representation\nParse a string representation into a DLDataType\nContains the error value\nError reference class\nError kind, wraps in a struct to be explicit\nerror object\nContains the success value\nDefault result that uses Error as the error type\nGet the backtrace of the error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error by moving from raised error\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the kind of the error\nGet the message of the error\nSet the error as raised\nGet the traceback of the error in the order of most recent …\nAppend the backtrace to the error\nABI-stable owned Module for FFI operations.\nA TVM FFI Module for loading dynamic libraries and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a function from the module by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a module from a dynamic library file.\nError reference class\nfunction object\nCall the function in packed format.\nCall function with compile-time known argument count This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a function from a packed function\nConstruct a function from a typed function\nGet global function by name This function will throw an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a function as a global function\ntype of extra items storage that follows the object\nObject type is by default the TVMFFIObject\nArc-like wrapper for Object that allows shared ownership\nTraits that can be used to check if a type is an object\nTraits for objects with extra items that follows the object\nBase class for ObjectRef\nTraits to specify core operations of ObjectRef\nthe type key of the object\nThe index type of the FFI objects\nGet the raw pointer from the ObjectArc\nGet the raw mutable pointer from the ObjectArc\nReturn the extra items data pointer\nReturn the number of extra items\nReturn the extra items data pointer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMove a previously allocated object into the ObjectArc\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove the ObjectArc into a raw pointer\nArray object.\nPOD bool value\nTVMFFIByteArray*\nBytes object, layout = { TVMFFIObject, TVMFFIByteArray, ……\nDLTensor*\nDLDataType\nDLDevice\nError object.\nPOD float value\nFunction object.\nPOD int value\nMap object.\nRuntime dynamic loaded module object.\nNone/nullptr value\nR-value reference to ObjectRef\nOpaque pointer object\nOpaque python object.\nconst char*\nShape object, layout = { TVMFFIObject, { const int64_t*, …\nSmall bytes on stack\nSmall string on stack\nStart of statically defined objects.\nString object, layout = { TVMFFIObject, TVMFFIByteArray, …\nTensor object, layout = { TVMFFIObject, DLTensor, … }\nReturn the object header This function is implemented as a …\nGet the strong reference count of the ObjectArc\nGet the weak reference count of the ObjectArc\nABI stable Bytes container for ffi\nABI stable String container for ffi\nGet the string as a byte slice\nGet the bytes as a slice\nGet the string as a str slice\nReturns the argument unchanged.\nCreate Bytes from any type that can be converted to a byte …\nReturns the argument unchanged.\nCreate String from any type that can be converted to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of the bytes\nGet the length of the string in bytes\nCreate a new empty Bytes container\nCreate a new empty String container\nTrait to enable a value to be compatible with Any Enables …\nCopy value from TVMFFIAny after checking caller must …\nthe value to copy to TVMFFIAny\nGet the type key of a type when TryCastFromAnyView fails.\nthe value to move from TVMFFIAny NOTE: pay very careful …\nconsume the value to move to Any\ntry to cast the value from AnyView\nthe type string of the type")