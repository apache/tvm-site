searchState.loadedDescShard("tvm_ffi_sys", 0, "TVM FFI Any value - a union type that can hold various …\nSecond union in TVMFFIAny - 8 bytes\nByte array data structure used by String and Bytes.\nError cell used in error object following header.\nField getter function pointer type\nInformation support for optional object reflection\nField setter function pointer type\nFunction cell\nMethod information that can appear in reflection table\nObject creator function pointer type\nHandle to Object from C API’s pov\nSafe call type for function ABI\nShape cell used in shape object following header.\nColumn array that stores extra attributes about types\nThe index type of the FFI objects\nRuntime type information for object type checking\nExtra information of object type that can be used for …\nThe alignment of the field\nConvert the TVMFFIByteArray to a str view\nAn optional function that can create a new empty instance …\nThe data of the column\ndata union - 8 bytes\nThe default value of the field, this field hold AnyView, …\nThe docstring about the field\nThe docstring about the method\nThe docstring about the object\nRecords the static type kind of the field\nThe reflection field information\nbitmask flags of the field\nbitmask flags of the method\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafe function to create a TVMFFIByteArray from a string …\nThe getter to access the field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArray object.\nPOD bool value\nTVMFFIByteArray*\nBytes object, layout = { TVMFFIObject, TVMFFIByteArray, ……\nDLTensor*\nDLDataType\nDLDevice\nError object.\nPOD float value\nFunction object.\nPOD int value\nMap object.\nRuntime dynamic loaded module object.\nNone/nullptr value\nR-value reference to ObjectRef\nOpaque pointer object\nOpaque python object.\nconst char*\nShape object, layout = { TVMFFIObject, { const int64_t*, …\nSmall bytes on stack\nSmall string on stack\nStart of statically defined objects.\nString object, layout = { TVMFFIObject, TVMFFIByteArray, …\nTensor object, layout = { TVMFFIObject, DLTensor, … }\nThe metadata of the field in JSON string\nOptional metadata of the method in JSON string\nThe extra information of the type\nThe method wrapped as ffi::Function, stored as AnyView The …\nThe reflection method\nThe name of the field\nThe name of the field\ncreate a new instance of TVMFFIAny that represents None\nnumber of reflection accessible fields\nnumber of reflection acccesible methods\nThe offset of the field\nA C API compatible call with exception catching.\nThe setter to access the field The setter is set even if …\nThe size of the field\nThe size of the column\nsmall string length or zero padding\nOptional meta-data for structural eq/hash\nTotal size of the object struct, if it is fixed and known\n<code>type_acenstors[depth]</code> stores the type_index of the …\nnumber of parent types in the type hierachy\nThe runtime type index It can be allocated during runtime …\nType index of the object. The type index of Object and Any …\nthe unique type key to identify the type\nCached hash value of the type key, used for consistent …\nSmall string\nRaw C-string\nDevice\nData type\nFloating-point numbers\nIntegers\nRef counted objects\nTypeless pointers\nuint64 repr mainly used for hashing\nDLPack tensor allocator function type\nThe type of the stream handle.\nDLPack data type struct\nDLPack data type code enum\nDLPack tensor struct - plain C tensor object, does not …\nThe offset in bytes to the beginning pointer to data\nThe data pointer points to the allocated data\nThe device of the tensor\nThe data type of the pointer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of dimensions\nThe shape of the tensor\nStrides of the tensor (in number of elements, not bytes) …")